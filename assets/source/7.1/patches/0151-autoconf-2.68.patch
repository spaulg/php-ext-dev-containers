--- a/ext/fileinfo/config.m4
+++ b/ext/fileinfo/config.m4
@@ -14,7 +14,7 @@
     libmagic/readcdf.c libmagic/softmagic.c"
 
   AC_MSG_CHECKING([for strcasestr])
-  AC_TRY_RUN([
+  AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <string.h>
 #include <strings.h>
 #include <stdlib.h>
@@ -39,14 +39,14 @@
 
         return !(NULL != ret);
 }
-  ],[
+  ]])],[
     dnl using the platform implementation
     AC_MSG_RESULT(yes)
   ],[
     AC_MSG_RESULT(no)
     AC_MSG_NOTICE(using libmagic strcasestr implementation)
     libmagic_sources="$libmagic_sources libmagic/strcasestr.c"
-  ])
+  ],[AC_MSG_RESULT([skipped, cross-compiling])])
 
   PHP_NEW_EXTENSION(fileinfo, fileinfo.c $libmagic_sources, $ext_shared,,-I@ext_srcdir@/libmagic)
   PHP_ADD_BUILD_DIR($ext_builddir/libmagic)
--- a/configure.in
+++ b/configure.in
@@ -8,7 +8,7 @@
 dnl Basic autoconf + automake initialization, generation of config.nice.
 dnl -------------------------------------------------------------------------
 
-AC_PREREQ(2.59)
+AC_PREREQ([2.68])
 AC_INIT(README.GIT-RULES)
 ifdef([AC_PRESERVE_HELP_ORDER], [AC_PRESERVE_HELP_ORDER], [])
 
--- a/ext/opcache/config.m4
+++ b/ext/opcache/config.m4
@@ -29,7 +29,7 @@
   AC_CHECK_HEADERS([unistd.h sys/uio.h])
 
   AC_MSG_CHECKING(for sysvipc shared memory support)
-  AC_TRY_RUN([
+  AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <sys/ipc.h>
@@ -93,13 +93,13 @@
   }
   return 0;
 }
-],dnl
+]])],[dnl
     AC_DEFINE(HAVE_SHM_IPC, 1, [Define if you have SysV IPC SHM support])
-    msg=yes,msg=no,msg=no)
+    msg=yes],[msg=no],[msg=no])
   AC_MSG_RESULT([$msg])
 
   AC_MSG_CHECKING(for mmap() using MAP_ANON shared memory support)
-  AC_TRY_RUN([
+  AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <sys/mman.h>
@@ -145,13 +145,13 @@
   }
   return 0;
 }
-],dnl
+]])],[dnl
     AC_DEFINE(HAVE_SHM_MMAP_ANON, 1, [Define if you have mmap(MAP_ANON) SHM support])
-    msg=yes,msg=no,msg=no)
+    msg=yes],[msg=no],[msg=no])
   AC_MSG_RESULT([$msg])
 
   AC_MSG_CHECKING(for mmap() using /dev/zero shared memory support)
-  AC_TRY_RUN([
+  AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <sys/mman.h>
@@ -200,13 +200,13 @@
   }
   return 0;
 }
-],dnl
+]])],[dnl
     AC_DEFINE(HAVE_SHM_MMAP_ZERO, 1, [Define if you have mmap("/dev/zero") SHM support])
-    msg=yes,msg=no,msg=no)
+    msg=yes],[msg=no],[msg=no])
   AC_MSG_RESULT([$msg])
 
   AC_MSG_CHECKING(for mmap() using shm_open() shared memory support)
-  AC_TRY_RUN([
+  AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <sys/mman.h>
@@ -269,13 +269,13 @@
   }
   return 0;
 }
-],dnl
+]])],[dnl
     AC_DEFINE(HAVE_SHM_MMAP_POSIX, 1, [Define if you have POSIX mmap() SHM support])
-    msg=yes,msg=no,msg=no)
+    msg=yes],[msg=no],[msg=no])
   AC_MSG_RESULT([$msg])
 
   AC_MSG_CHECKING(for mmap() using regular file shared memory support)
-  AC_TRY_RUN([
+  AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <sys/mman.h>
@@ -338,14 +338,14 @@
   }
   return 0;
 }
-],dnl
+]])],[dnl
     AC_DEFINE(HAVE_SHM_MMAP_FILE, 1, [Define if you have mmap() SHM support])
-    msg=yes,msg=no,msg=no)
+    msg=yes],[msg=no],[msg=no])
   AC_MSG_RESULT([$msg])
 
 flock_type=unknown
 AC_MSG_CHECKING("whether flock struct is linux ordered")
-AC_TRY_RUN([
+AC_RUN_IFELSE([AC_LANG_SOURCE([[
   #include <fcntl.h>
   struct flock lock = { 1, 2, 3, 4, 5 };
   int main() {
@@ -354,14 +354,18 @@
     }
     return 1;
   }
-], [
+]])], [
 	flock_type=linux
     AC_DEFINE([HAVE_FLOCK_LINUX], [], [Struct flock is Linux-type])
-    AC_MSG_RESULT("yes")
-], AC_MSG_RESULT("no") )
+    AC_MSG_RESULT([yes])
+], [AC_MSG_RESULT([no])], [
+  flock_type=linux
+  AC_DEFINE([HAVE_FLOCK_LINUX], [], [Struct flock is Linux-type])
+  AC_MSG_RESULT([yes])
+])
 
 AC_MSG_CHECKING("whether flock struct is BSD ordered")
-AC_TRY_RUN([
+AC_RUN_IFELSE([AC_LANG_SOURCE([[
   #include <fcntl.h>
   struct flock lock = { 1, 2, 3, 4, 5 };
   int main() {
@@ -370,11 +374,11 @@
     }
     return 1;
   }
-], [
+]])], [
 	flock_type=bsd
     AC_DEFINE([HAVE_FLOCK_BSD], [], [Struct flock is BSD-type])
-    AC_MSG_RESULT("yes")
-], AC_MSG_RESULT("no") )
+    AC_MSG_RESULT([yes])
+], [AC_MSG_RESULT([no])], [AC_MSG_RESULT([no])])
 
 if test "$flock_type" = "unknown"; then
 	AC_MSG_ERROR([Don't know how to define struct flock on this system[,] set --enable-opcache=no])
