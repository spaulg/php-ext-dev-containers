From: Nikita Popov <nikita.ppv@gmail.com>
Date: Mon, 9 Nov 2020 14:44:11 +0100
Subject: Use true/false instead of TRUE/FALSE in intl

And drop the U_DEFINE_TRUE_AND_FALSE flag.
---
 .../breakiterator/codepointiterator_internal.cpp   | 14 ++++++-------
 ext/intl/collator/collator_convert.c               | 10 ++++-----
 ext/intl/collator/collator_error.c                 |  2 +-
 ext/intl/collator/collator_locale.c                |  2 +-
 ext/intl/collator/collator_sort.c                  |  4 ++--
 ext/intl/common/common_error.c                     |  2 +-
 ext/intl/dateformat/dateformat_attr.c              |  6 +++---
 ext/intl/locale/locale_methods.c                   | 24 +++++++++++-----------
 ext/intl/normalizer/normalizer_normalize.c         | 24 +++++++++++-----------
 ext/intl/php_intl.h                                |  1 +
 ext/intl/timezone/timezone_class.cpp               |  2 +-
 ext/intl/timezone/timezone_methods.cpp             |  2 +-
 12 files changed, 47 insertions(+), 46 deletions(-)

diff --git a/ext/intl/breakiterator/codepointiterator_internal.cpp b/ext/intl/breakiterator/codepointiterator_internal.cpp
index c2863a3..47c20c0 100644
--- a/ext/intl/breakiterator/codepointiterator_internal.cpp
+++ b/ext/intl/breakiterator/codepointiterator_internal.cpp
@@ -57,7 +57,7 @@ CodePointBreakIterator& CodePointBreakIterator::operator=(const CodePointBreakIt
 		return *this;
 	}
 
-	this->fText = utext_clone(this->fText, that.fText, FALSE, TRUE, &uec);
+	this->fText = utext_clone(this->fText, that.fText, false, true, &uec);
 
 	//don't bother copying the character iterator, getText() is deprecated
 	clearCurrentCharIter();
@@ -77,17 +77,17 @@ CodePointBreakIterator::~CodePointBreakIterator()
 UBool CodePointBreakIterator::operator==(const BreakIterator& that) const
 {
 	if (typeid(*this) != typeid(that)) {
-		return FALSE;
+		return false;
 	}
 
 	const CodePointBreakIterator& that2 =
 		static_cast<const CodePointBreakIterator&>(that);
 
 	if (!utext_equals(this->fText, that2.fText)) {
-		return FALSE;
+		return false;
 	}
 
-	return TRUE;
+	return true;
 }
 
 CodePointBreakIterator* CodePointBreakIterator::clone(void) const
@@ -108,7 +108,7 @@ CharacterIterator& CodePointBreakIterator::getText(void) const
 
 UText *CodePointBreakIterator::getUText(UText *fillIn, UErrorCode &status) const
 {
-	return utext_clone(fillIn, this->fText, FALSE, TRUE, &status);
+	return utext_clone(fillIn, this->fText, false, true, &status);
 }
 
 void CodePointBreakIterator::setText(const UnicodeString &text)
@@ -127,7 +127,7 @@ void CodePointBreakIterator::setText(UText *text, UErrorCode &status)
 		return;
 	}
 
-	this->fText = utext_clone(this->fText, text, FALSE, TRUE, &status);
+	this->fText = utext_clone(this->fText, text, false, true, &status);
 
 	clearCurrentCharIter();
 }
@@ -279,7 +279,7 @@ CodePointBreakIterator &CodePointBreakIterator::refreshInputText(UText *input, U
 	}
 
 	int64_t pos = utext_getNativeIndex(this->fText);
-	this->fText = utext_clone(this->fText, input, FALSE, TRUE, &status);
+	this->fText = utext_clone(this->fText, input, false, true, &status);
 	if (U_FAILURE(status)) {
 		return *this;
 	}
diff --git a/ext/intl/collator/collator_convert.c b/ext/intl/collator/collator_convert.c
index 2a3ac10..7850adf 100644
--- a/ext/intl/collator/collator_convert.c
+++ b/ext/intl/collator/collator_convert.c
@@ -68,7 +68,7 @@ static void collator_convert_hash_item_from_utf8_to_utf16(
 
 	/* Update current hash item with the converted value. */
 	MAKE_STD_ZVAL( znew_val );
-	ZVAL_STRINGL( znew_val, (char*)new_val, UBYTES(new_val_len), FALSE );
+	ZVAL_STRINGL( znew_val, (char*)new_val, UBYTES(new_val_len), false );
 
 	if( hashKeyType == HASH_KEY_IS_STRING )
 	{
@@ -113,7 +113,7 @@ static void collator_convert_hash_item_from_utf16_to_utf8(
 
 	/* Update current hash item with the converted value. */
 	MAKE_STD_ZVAL( znew_val );
-	ZVAL_STRINGL( znew_val, (char*)new_val, new_val_len, FALSE );
+	ZVAL_STRINGL( znew_val, (char*)new_val, new_val_len, false );
 
 	if( hashKeyType == HASH_KEY_IS_STRING )
 	{
@@ -201,7 +201,7 @@ zval* collator_convert_zstr_utf16_to_utf8( zval* utf16_zval )
 		php_error( E_WARNING, "Error converting utf16 to utf8 in collator_convert_zval_utf16_to_utf8()" );
 
 	ALLOC_INIT_ZVAL( utf8_zval );
-	ZVAL_STRINGL( utf8_zval, str, str_len, FALSE );
+	ZVAL_STRINGL( utf8_zval, str, str_len, false );
 
 	return utf8_zval;
 }
@@ -232,7 +232,7 @@ zval* collator_convert_zstr_utf8_to_utf16( zval* utf8_zval )
 
 	/* Set string. */
 	ALLOC_INIT_ZVAL( zstr );
-	ZVAL_STRINGL( zstr, (char*)ustr, UBYTES(ustr_len), FALSE );
+	ZVAL_STRINGL( zstr, (char*)ustr, UBYTES(ustr_len), false );
 
 	return zstr;
 }
@@ -307,7 +307,7 @@ zval* collator_convert_object_to_string( zval* obj TSRMLS_DC )
 	zval_dtor( zstr );
 
 	/* Set string. */
-	ZVAL_STRINGL( zstr, (char*)ustr, UBYTES(ustr_len), FALSE );
+	ZVAL_STRINGL( zstr, (char*)ustr, UBYTES(ustr_len), false );
 
 	/* Don't free ustr cause it's set in zstr without copy.
 	 * efree( ustr );
diff --git a/ext/intl/collator/collator_error.c b/ext/intl/collator/collator_error.c
index c4e4125..d4cef5f 100644
--- a/ext/intl/collator/collator_error.c
+++ b/ext/intl/collator/collator_error.c
@@ -80,7 +80,7 @@ PHP_FUNCTION( collator_get_error_message )
 
 	/* Return last error message. */
 	message = intl_error_get_message( COLLATOR_ERROR_P( co ) TSRMLS_CC );
-	RETURN_STRING( (char*)message, FALSE );
+	RETURN_STRING( (char*)message, false );
 }
 /* }}} */
 
diff --git a/ext/intl/collator/collator_locale.c b/ext/intl/collator/collator_locale.c
index b30b021..572a47e 100644
--- a/ext/intl/collator/collator_locale.c
+++ b/ext/intl/collator/collator_locale.c
@@ -66,7 +66,7 @@ PHP_FUNCTION( collator_get_locale )
 	COLLATOR_CHECK_STATUS( co, "Error getting locale by type" );
 
 	/* Return it. */
-	RETVAL_STRINGL( locale_name, strlen(locale_name), TRUE );
+	RETVAL_STRINGL( locale_name, strlen(locale_name), true );
 }
 /* }}} */
 
diff --git a/ext/intl/collator/collator_sort.c b/ext/intl/collator/collator_sort.c
index 04a24f0..e04dba0 100644
--- a/ext/intl/collator/collator_sort.c
+++ b/ext/intl/collator/collator_sort.c
@@ -343,7 +343,7 @@ static void collator_sort_internal( int renumber, INTERNAL_FUNCTION_PARAMETERS )
  */
 PHP_FUNCTION( collator_sort )
 {
-	collator_sort_internal( TRUE, INTERNAL_FUNCTION_PARAM_PASSTHRU );
+	collator_sort_internal( true, INTERNAL_FUNCTION_PARAM_PASSTHRU );
 }
 /* }}} */
 
@@ -535,7 +535,7 @@ PHP_FUNCTION( collator_sort_with_sort_keys )
  */
 PHP_FUNCTION( collator_asort )
 {
-	collator_sort_internal( FALSE, INTERNAL_FUNCTION_PARAM_PASSTHRU );
+	collator_sort_internal( false, INTERNAL_FUNCTION_PARAM_PASSTHRU );
 }
 /* }}} */
 
diff --git a/ext/intl/common/common_error.c b/ext/intl/common/common_error.c
index a0ee7c1..9671b67 100644
--- a/ext/intl/common/common_error.c
+++ b/ext/intl/common/common_error.c
@@ -38,7 +38,7 @@ PHP_FUNCTION( intl_get_error_code )
 PHP_FUNCTION( intl_get_error_message )
 {
 	char* message = intl_error_get_message( NULL TSRMLS_CC );
-	RETURN_STRING( message, FALSE );
+	RETURN_STRING( message, false );
 }
 /* }}} */
 
diff --git a/ext/intl/dateformat/dateformat_attr.c b/ext/intl/dateformat/dateformat_attr.c
index bf6b544..a8f5d8c 100644
--- a/ext/intl/dateformat/dateformat_attr.c
+++ b/ext/intl/dateformat/dateformat_attr.c
@@ -88,7 +88,7 @@ PHP_FUNCTION( datefmt_get_pattern )
 	UChar  value_buf[64];
 	int    length = USIZE( value_buf );
 	UChar* value  = value_buf;
-	zend_bool   is_pattern_localized =FALSE;
+	zend_bool   is_pattern_localized = false;
 
 	DATE_FORMAT_METHOD_INIT_VARS;
 
@@ -131,7 +131,7 @@ PHP_FUNCTION( datefmt_set_pattern )
 	int         value_len = 0;
 	int         slength = 0;
 	UChar*	    svalue  = NULL;
-	zend_bool   is_pattern_localized =FALSE;
+	zend_bool   is_pattern_localized = false;
 
 
 	DATE_FORMAT_METHOD_INIT_VARS;
@@ -227,7 +227,7 @@ PHP_FUNCTION( datefmt_is_lenient )
  */
 PHP_FUNCTION( datefmt_set_lenient )
 {
-	zend_bool isLenient  = FALSE;
+	zend_bool isLenient = false;
 
 	DATE_FORMAT_METHOD_INIT_VARS;
 
diff --git a/ext/intl/locale/locale_methods.c b/ext/intl/locale/locale_methods.c
index 39d80d5..bbd05d9 100644
--- a/ext/intl/locale/locale_methods.c
+++ b/ext/intl/locale/locale_methods.c
@@ -88,14 +88,14 @@ static const char * const 	LOC_PREFERRED_GRANDFATHERED[]  = {
 	NULL
 };
 
-/*returns TRUE if a is an ID separator FALSE otherwise*/
+/* returns true if a is an ID separator, false otherwise */
 #define isIDSeparator(a) (a == '_' || a == '-')
 #define isKeywordSeparator(a) (a == '@' )
 #define isEndOfTag(a) (a == '\0' )
 
 #define isPrefixLetter(a) ((a=='x')||(a=='X')||(a=='i')||(a=='I'))
 
-/*returns TRUE if one of the special prefixes is here (s=string)
+/*returns true if one of the special prefixes is here (s=string)
   'x-' or 'i-' */
 #define isIDPrefix(s) (isPrefixLetter(s[0])&&isIDSeparator(s[1]))
 #define isKeywordPrefix(s) ( isKeywordSeparator(s[0]) )
@@ -211,7 +211,7 @@ static int getSingletonPos(const char* str)
    Get default locale */
 PHP_NAMED_FUNCTION(zif_locale_get_default)
 {
-	RETURN_STRING( intl_locale_get_default( TSRMLS_C ), TRUE );
+	RETURN_STRING( intl_locale_get_default( TSRMLS_C ), true );
 }
 
 /* }}} */
@@ -409,12 +409,12 @@ static void get_icu_value_src_php( char* tag_name, INTERNAL_FUNCTION_PARAMETERS)
 		if( tag_value){
 			efree( tag_value);
 		}
-		RETURN_STRING( empty_result , TRUE);
+		RETURN_STRING( empty_result , true);
 	}
 
 	/* value found */
 	if( tag_value){
-		RETURN_STRING( tag_value , FALSE);
+		RETURN_STRING( tag_value , false);
 	}
 
 	/* Error encountered while fetching the value */
@@ -599,7 +599,7 @@ static void get_icu_disp_value_src_php( char* tag_name, INTERNAL_FUNCTION_PARAME
 		RETURN_FALSE;
 	}
 
-	RETVAL_STRINGL( utf8value, utf8value_len , FALSE);
+	RETVAL_STRINGL( utf8value, utf8value_len , false);
 
 }
 /* }}} */
@@ -1062,11 +1062,11 @@ static int add_array_entry(const char* loc_name, zval* hash_arr, char* key_name
 			}
 			cur_key_name = (char*)ecalloc( 25,  25);
 			sprintf( cur_key_name , "%s%d", key_name , cnt++);
-			add_assoc_string( hash_arr, cur_key_name , token ,TRUE );
+			add_assoc_string( hash_arr, cur_key_name , token , true );
 			/* tokenize on the "_" or "-" and stop  at singleton if any */
 			while( (token = php_strtok_r(NULL , DELIMITER , &last_ptr)) && (strlen(token)>1) ){
 				sprintf( cur_key_name , "%s%d", key_name , cnt++);
-				add_assoc_string( hash_arr, cur_key_name , token , TRUE );
+				add_assoc_string( hash_arr, cur_key_name , token , true );
 			}
 /*
 			if( strcmp(key_name, LOC_PRIVATE_TAG) == 0 ){
@@ -1075,7 +1075,7 @@ static int add_array_entry(const char* loc_name, zval* hash_arr, char* key_name
 		}
 	} else {
 		if( result == 1 ){
-			add_assoc_string( hash_arr, key_name , key_value , TRUE );
+			add_assoc_string( hash_arr, key_name , key_value , true );
 			cur_result = 1;
 		}
 	}
@@ -1124,7 +1124,7 @@ PHP_FUNCTION(locale_parse)
 
 	grOffset =  findOffset( LOC_GRANDFATHERED , loc_name );
 	if( grOffset >= 0 ){
-		add_assoc_string( return_value , LOC_GRANDFATHERED_LANG_TAG , estrdup(loc_name) ,FALSE );
+		add_assoc_string( return_value , LOC_GRANDFATHERED_LANG_TAG , estrdup(loc_name) , false );
 	}
 	else{
 		/* Not grandfathered */
@@ -1182,10 +1182,10 @@ PHP_FUNCTION(locale_get_all_variants)
 		if( result > 0 && variant){
 			/* Tokenize on the "_" or "-" */
 			token = php_strtok_r( variant , DELIMITER , &saved_ptr);
-			add_next_index_stringl( return_value, token , strlen(token) ,TRUE );
+			add_next_index_stringl( return_value, token , strlen(token) , true );
 			/* tokenize on the "_" or "-" and stop  at singleton if any	*/
 			while( (token = php_strtok_r(NULL , DELIMITER, &saved_ptr)) && (strlen(token)>1) ){
- 				add_next_index_stringl( return_value, token , strlen(token) ,TRUE );
+ 				add_next_index_stringl( return_value, token , strlen(token) , true );
 			}
 		}
 		if( variant ){
diff --git a/ext/intl/normalizer/normalizer_normalize.c b/ext/intl/normalizer/normalizer_normalize.c
index f46285e..0109bf5 100644
--- a/ext/intl/normalizer/normalizer_normalize.c
+++ b/ext/intl/normalizer/normalizer_normalize.c
@@ -36,20 +36,20 @@ PHP_FUNCTION( normalizer_normalize )
 	/* form is optional, defaults to FORM_C */
 	long			form = NORMALIZER_DEFAULT;
 	int			input_len = 0;
-		
+
 	UChar*			uinput = NULL;
 	int			uinput_len = 0;
 	int			expansion_factor = 1;
 	UErrorCode		status = U_ZERO_ERROR;
-		
+
 	UChar*			uret_buf = NULL;
 	int			uret_len = 0;
-		
+
 	char*			ret_buf = NULL;
 	int32_t			ret_len = 0;
 
 	int32_t			size_needed;
-		
+
 	intl_error_reset( NULL TSRMLS_CC );
 
 	/* Parse parameters. */
@@ -109,11 +109,11 @@ PHP_FUNCTION( normalizer_normalize )
 
 	/* normalize */
 	size_needed = unorm_normalize( uinput, uinput_len, form, (int32_t) 0 /* options */, uret_buf, uret_len, &status);
-	
+
 	/* Bail out if an unexpected error occurred.
 	 * (U_BUFFER_OVERFLOW_ERROR means that *target buffer is not large enough).
 	 * (U_STRING_NOT_TERMINATED_WARNING usually means that the input string is empty).
-	 */	
+	 */
 	if( U_FAILURE(status) && status != U_BUFFER_OVERFLOW_ERROR && status != U_STRING_NOT_TERMINATED_WARNING ) {
 		efree( uret_buf );
 		efree( uinput );
@@ -159,7 +159,7 @@ PHP_FUNCTION( normalizer_normalize )
 	}
 
 	/* Return it. */
-	RETVAL_STRINGL( ret_buf, ret_len, FALSE );
+	RETVAL_STRINGL( ret_buf, ret_len, false );
 }
 /* }}} */
 
@@ -178,9 +178,9 @@ PHP_FUNCTION( normalizer_is_normalized )
 	UChar*	 	uinput = NULL;
 	int		uinput_len = 0;
 	UErrorCode	status = U_ZERO_ERROR;
-		
-	UBool		uret = FALSE;
-		
+
+	UBool		uret = false;
+
 	intl_error_reset( NULL TSRMLS_CC );
 
 	/* Parse parameters. */
@@ -231,7 +231,7 @@ PHP_FUNCTION( normalizer_is_normalized )
 
 	/* test string */
 	uret = unorm_isNormalizedWithOptions( uinput, uinput_len, form, (int32_t) 0 /* options */, &status);
-	
+
 	efree( uinput );
 
 	/* Bail out if an unexpected error occurred. */
@@ -243,7 +243,7 @@ PHP_FUNCTION( normalizer_is_normalized )
 
 	if ( uret )
 		RETURN_TRUE;
-				
+
 	RETURN_FALSE;
 }
 /* }}} */
diff --git a/ext/intl/php_intl.h b/ext/intl/php_intl.h
index 7a71123..19819cc 100644
--- a/ext/intl/php_intl.h
+++ b/ext/intl/php_intl.h
@@ -21,6 +21,7 @@
 #define PHP_INTL_H
 
 #include <php.h>
+#include <stdbool.h>
 
 /* Even if we're included from C++, don't introduce C++ definitions
  * because we were included with extern "C". The effect would be that
diff --git a/ext/intl/timezone/timezone_class.cpp b/ext/intl/timezone/timezone_class.cpp
index bd77028..03898c0 100644
--- a/ext/intl/timezone/timezone_class.cpp
+++ b/ext/intl/timezone/timezone_class.cpp
@@ -317,7 +317,7 @@ static HashTable *TimeZone_get_debug_info(zval *object, int *is_temp TSRMLS_DC)
 
 	int32_t rawOffset, dstOffset;
 	UDate now = Calendar::getNow();
-	tz->getOffset(now, FALSE, rawOffset, dstOffset, uec);
+	tz->getOffset(now, false, rawOffset, dstOffset, uec);
 	if (U_FAILURE(uec)) {
 		return Z_ARRVAL(zv);
 	}
diff --git a/ext/intl/timezone/timezone_methods.cpp b/ext/intl/timezone/timezone_methods.cpp
index e75472b..7888e51 100644
--- a/ext/intl/timezone/timezone_methods.cpp
+++ b/ext/intl/timezone/timezone_methods.cpp
@@ -96,7 +96,7 @@ U_CFUNC PHP_FUNCTION(intltz_from_date_time_zone)
 		RETURN_NULL();
 	}
 
-	tz = timezone_convert_datetimezone(tzobj->type, tzobj, FALSE, NULL,
+	tz = timezone_convert_datetimezone(tzobj->type, tzobj, false, NULL,
 		"intltz_from_date_time_zone" TSRMLS_CC);
 	if (tz == NULL) {
 		RETURN_NULL();
